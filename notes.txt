Getting Started with Webpack Notes

i) Basic Setup
mkdir webpack-demo
cd webpack-demo
npm init -y
npm install webpack webpack-cli --save-dev

ii) Create project file structure
 webpack-demo
  |- package.json
+ |- index.html
+ |- /src
+   |- index.js

iii) Adjust package.jspn to make package private and remove the main entry point to prevent accidentally publishing code

iv) Creating a Bundle
First we'll tweak our directory structure slightly, separating the "source" code (/src) from our "distribution" code (/dist).
The "source" code is the code that we'll write and edit. The "distribution" code is the minimized and optimized output of our 
build process that will eventually be loaded in the browser.

v) Modify index.js to include 'import _ from 'lodash';

vi) Now, since we'll be bundling our scripts, we have to update our index.html file. Let's remove the lodash <script>,
 as we now import it, and modify the other <script> tag to load the bundle, instead of the raw /src file.

 In this setup, index.js explicitly requires lodash to be present, and binds it as _ (no global scope pollution). 
 By stating what dependencies a module needs, webpack can use this information to build a dependency graph. 
 It then uses the graph to generate an optimized bundle where scripts will be executed in the correct order.

vii) Run npx webpack
With that said, let's run npx webpack, which will take our script at src/index.js as the entry point, and will generate dist/main.js as the output. 
The npx command, which ships with Node 8.2/npm 5.2.0 or higher, runs the webpack binary (./node_modules/.bin/webpack) of the webpack package we 
installed in the beginning: 

viii) Using a Configuration  - create config file
As of version 4, webpack doesn't require any configuration, but most projects will need a more complex setup, which is why webpack supports a configuration file. 
This is much more efficient than having to manually type in a lot of commands in the terminal, so let's create one:

ix) Run the build using new configuration file
Command: npx webpack --config webpack.config.js 

A configuration file allows far more flexibility than simple CLI usage. We can specify loader rules, plugins, resolve options and many other enhancements this way